## Process this file with automake to create Makefile.in.

# The name of the module.
DOC_MODULE=xmlroff

# The top-level SGML file.
DOC_MAIN_SGML_FILE=xmlroff-docs.sgml

# The directory containing the source code. Relative to $(srcdir)
DOC_SOURCE_DIR=..

# Extra options to supply to gtkdoc-scan
SCAN_OPTIONS=--deprecated-guards="FO_DISABLE_DEPRECATED"

# Extra options to supply to gtkdoc-mkdb
MKDB_OPTIONS=--sgml-mode --output-format=xml

# Extra options to supply to gtkdoc-fixref
FIXXREF_OPTIONS=

# Used for dependencies
HFILE_GLOB=$(top_srcdir)/libfo/*.h $(top_srcdir)/libfo/*/*.h
CFILE_GLOB=$(top_srcdir)/xmlroff/*.c $(top_srcdir)/libfo/*.c $(top_srcdir)/libfo/*/*.c

# Headers to ignore
IGNORE_HFILES=					\
	config.h				\
	fo-all-area.h				\
	fo-all-datatype.h			\
	fo-all-fo.h				\
	fo-all-property				\
	fo-area-area-private.h			\
	fo-area-layout-private.h		\
	fo-area-private.h			\
	fo-area-reference-private.h		\
	fo-area-spanning-table-cell-private.h	\
	fo-area-table-cell-private.h		\
	fo-area-table-continuation-private.h	\
	fo-area-table-part-private.h		\
	fo-area-table-private.h			\
	fo-area-viewport-reference-private.h	\
	fo-basic-link-private.h			\
	fo-bidi-override-private.h		\
	fo-block-area.h				\
	fo-block-block-area.h			\
	fo-block-block-private.h		\
	fo-block-container-area.h		\
	fo-block-container-private.h		\
	fo-block-fo-private.h			\
	fo-block-layout-private.h		\
	fo-block-private.h			\
	fo-block-whitespace-private.h		\
	fo-character-private.h			\
	fo-color-profile-private.h		\
	fo-conditional-page-master-reference-private.h	\
	fo-context-private.h			\
	fo-datatype-private.h			\
	fo-declarations-private.h		\
	fo-doc-private.h			\
	fo-doc-cairo-private.h			\
	fo-doc-gp-private.h			\
	fo-expr-context-private.h		\
	fo-expr-func-private.h			\
	fo-external-graphic-area.h		\
	fo-external-graphic-private.h		\
	fo-font-desc-private.h			\
	fo-flow-area.h				\
	fo-flow-private.h			\
	fo-fo-private.h				\
	fo-footnote-body-private.h		\
	fo-footnote-private.h			\
	fo-initial-property-set-private.h	\
	fo-inline-container-private.h		\
	fo-inline-private.h			\
	fo-instream-foreign-object-private.h	\
	fo-layout-private.h			\
	fo-layout-gp-private.h			\
	fo-layout-master-set-private.h		\
	fo-leader-private.h			\
	fo-length-range-private.h		\
	fo-libfo.h				\
	fo-list-block-area.h			\
	fo-list-block-private.h			\
	fo-list-item-body-area.h		\
	fo-list-item-body-private.h		\
	fo-list-item-label-area.h		\
	fo-list-item-label-private.h		\
	fo-list-item-area.h			\
	fo-list-item-private.h			\
	fo-marker-parent-private.h		\
	fo-multi-case-private.h			\
	fo-multi-properties-private.h		\
	fo-multi-property-set-private.h		\
	fo-multi-switch-private.h		\
	fo-multi-toggle-private.h		\
	fo-node-private.h			\
	fo-numeric-private.h			\
	fo-page-number-citation-private.h	\
	fo-page-number-private.h		\
	fo-page-sequence-master-private.h	\
	fo-page-sequence-area.h			\
	fo-page-sequence-private.h		\
	fo-property-border-private.h		\
	fo-property-margin-private.h		\
	fo-property-padding-private.h		\
	fo-property-private.h			\
	fo-property-type-condity-private.h	\
	fo-region-after-private.h		\
	fo-region-before-private.h		\
	fo-region-body-area.h			\
	fo-region-body-private.h		\
	fo-region-end-private.h			\
	fo-region-start-private.h		\
	fo-repeatable-page-master-reference-private.h	\
	fo-root-private.h			\
	fo-simple-page-master-private.h		\
	fo-single-page-master-reference-private.h	\
	fo-static-content-private.h		\
	fo-table-and-caption-private.h		\
	fo-table-border-fo-private.h		\
	fo-table-body-area.h			\
	fo-table-body-private.h			\
	fo-table-caption-private.h		\
	fo-table-cell-area.h			\
	fo-table-cell-private.h			\
	fo-table-column-private.h		\
	fo-table-footer-area.h			\
	fo-table-footer-private.h		\
	fo-table-header-area.h			\
	fo-table-header-private.h		\
	fo-table-part-private.h			\
	fo-table-area.h				\
	fo-table-private.h			\
	fo-table-row-area.h			\
	fo-table-row-private.h			\
	fo-title-private.h			\
	fo-tree-private.h			\
	fo-wrapper-block-area.h			\
	fo-wrapper-block-private.h		\
	fo-wrapper-inline-private.h		\
	fo-wrapper-private.h			\
	fo-wrapper-whitespace-private.h		\
	fo-xml-doc-private.h			\
	fo-xml-node-private.h			\
	fo-xsl-formatter-private.h		\
	fo-xslt-transformer-private.h		\
	pango-xsl-attributes.h

# Extra files to add when scanning
EXTRA_HFILES=

# Images to copy into HTML directory
HTML_IMAGES =

# Non-autogenerated SGML files to be included in $(DOC_MAIN_SGML_FILE)
content_files = \
	backends.xml			\
	basic-interface.xml		\
	conformance-body.xml		\
	debugging.xml			\
	directory-structure.xml		\
	fo-area-c-file.xml		\
	fo-c-file.xml			\
	fo-h-file.xml			\
	generating-source.xml		\
	xmlroff-code-rules.xml		\
	xmlroff-property-decl.ent	\
	xmlroff-property-ref.ent

extra_files = \
	xmlroff.fo	\
	xmlroff.xml

xmldir = $(datadir)/xml/libfo-@VERSION@
xml_DATA = \
	xmlroff.fo	\
	xmlroff.xml

# CFLAGS and LDFLAGS for compiling scan program. Only needed
# if $(DOC_MODULE).types is non-empty.
GTKDOC_CFLAGS = \
	$(GLIB_CFLAGS)		\
	-I$(top_srcdir)		\
	-I$(top_builddir)

GTKDOC_LIBS = \
	../libfo/libfo-0.5.la \
	$(PANGOXSL_LIBS) \
	$(PANGO_LIBS) \
	$(GNOMEPRINT_LIBS) \
	$(GDKPIXBUF_LIBS)	\
	$(FREETYPE_LIBS) \
	$(LIBXSLT_LIBS) \
	$(POPT_LIBS)

# Commands for compiling and linking 
GTKDOC_CC=$(LIBTOOL) --mode=compile $(CC)
GTKDOC_LD=$(LIBTOOL) --mode=link $(CC)

#dist-hook-local:
#	mkdir $(distdir)/TEXT;          \
#	for f in $(srcdir)/TEXT/* ; do  \
#	  test -f $$f && cp -p $$f $(distdir)/TEXT; \
#	done

xmlroff.fo:	xmlroff.xml ../libfo-compat.xsl
	xsltproc http://docbook.sourceforge.net/release/xsl/current/fo/docbook.xsl $< > xmlroff.tmp
	xsltproc ../libfo-compat.xsl xmlroff.tmp > xmlroff.fo
	rm -f xmlroff.tmp

####################################
# Everything below here is generic #
####################################

# We set GPATH here; this gives us semantics for GNU make
# which are more like other make's VPATH, when it comes to
# whether a source that is a target of one rule is then
# searched for in VPATH/GPATH.
#
GPATH = $(srcdir)

TARGET_DIR=$(HTML_DIR)/$(DOC_MODULE)

EXTRA_DIST = 				\
	$(content_files)		\
	$(extra_files)			\
	$(HTML_IMAGES)			\
	$(DOC_MAIN_SGML_FILE)		\
	$(DOC_MODULE).types		\
	$(DOC_MODULE)-sections.txt	\
	$(DOC_MODULE)-overrides.txt

DOC_STAMPS=scan-build.stamp tmpl-build.stamp sgml-build.stamp html-build.stamp \
	   $(srcdir)/tmpl.stamp $(srcdir)/sgml.stamp $(srcdir)/html.stamp

SCANOBJ_FILES = 		 \
	$(DOC_MODULE).args  	 \
	$(DOC_MODULE).hierarchy  \
	$(DOC_MODULE).interfaces \
	$(DOC_MODULE).prerequisites \
	$(DOC_MODULE).signals

if ENABLE_GTK_DOC
all-local: html-build.stamp

#### scan ####

scan-build.stamp: $(HFILE_GLOB)
	@echo '*** Scanning header files ***'
	if grep -l '^..*$$' $(srcdir)/$(DOC_MODULE).types > /dev/null ; then \
	    CC="$(GTKDOC_CC)" LD="$(GTKDOC_LD)" CFLAGS="$(GTKDOC_CFLAGS)" LDFLAGS="$(GTKDOC_LIBS)" gtkdoc-scangobj --module=$(DOC_MODULE) --output-dir=$(srcdir) ; \
	else \
	    cd $(srcdir) ; \
	    for i in $(SCANOBJ_FILES) ; do \
               test -f $$i || touch $$i ; \
	    done \
	fi
	cd $(srcdir) && \
	  gtkdoc-scan --module=$(DOC_MODULE) --source-dir=$(DOC_SOURCE_DIR) --ignore-headers="$(IGNORE_HFILES)" $(SCAN_OPTIONS) $(EXTRA_HFILES)
	touch scan-build.stamp

$(DOC_MODULE)-decl.txt $(SCANOBJ_FILES): scan-build.stamp
	@true

#### templates ####

tmpl-build.stamp: $(DOC_MODULE)-decl.txt $(SCANOBJ_FILES) $(DOC_MODULE)-sections.txt $(DOC_MODULE)-overrides.txt
	@echo '*** Rebuilding template files ***'
	cd $(srcdir) && gtkdoc-mktmpl --module=$(DOC_MODULE)
	touch tmpl-build.stamp

tmpl.stamp: tmpl-build.stamp
	@true

#### sgml ####

sgml-build.stamp: tmpl.stamp $(CFILE_GLOB) $(srcdir)/tmpl/*.sgml
	@echo '*** Building SGML ***'
	cd $(srcdir) && \
	gtkdoc-mkdb --module=$(DOC_MODULE) --source-dir=$(DOC_SOURCE_DIR) $(MKDB_OPTIONS)
	touch sgml-build.stamp

sgml.stamp: sgml-build.stamp
	@true

#### html ####

html-build.stamp: sgml.stamp $(DOC_MAIN_SGML_FILE) $(content_files)
	@echo '*** Building HTML ***'
	rm -rf $(srcdir)/html 
	mkdir $(srcdir)/html
	cd $(srcdir)/html && gtkdoc-mkhtml $(DOC_MODULE) ../$(DOC_MAIN_SGML_FILE)
	test "x$(HTML_IMAGES)" = "x" || ( cd $(srcdir) && cp $(HTML_IMAGES) html )
	@echo '-- Fixing Crossreferences' 
	cd $(srcdir) && gtkdoc-fixxref --module-dir=html --html-dir=$(HTML_DIR) $(FIXXREF_OPTIONS)
	touch html-build.stamp
endif

##############

clean-local:
	rm -f *~ *.bak $(SCANOBJ_FILES) *-unused.txt $(DOC_STAMPS)

maintainer-clean-local: clean
	cd $(srcdir) && rm -rf sgml html $(DOC_MODULE)-decl-list.txt $(DOC_MODULE)-decl.txt

install-data-local:
	$(mkinstalldirs) $(DESTDIR)$(TARGET_DIR)
	(installfiles=`echo $(srcdir)/html/*`; \
	if test "$$installfiles" = '$(srcdir)/html/*'; \
	then echo '-- Nothing to install' ; \
	else \
	  for i in $$installfiles; do \
	    echo '-- Installing '$$i ; \
	    $(INSTALL_DATA) $$i $(DESTDIR)$(TARGET_DIR); \
	  done; \
	  echo '-- Installing $(srcdir)/html/index.sgml' ; \
	  $(INSTALL_DATA) $(srcdir)/html/index.sgml $(DESTDIR)$(TARGET_DIR); \
	fi)

#
# Require gtk-doc when making dist
#
if ENABLE_GTK_DOC
dist-check-gtkdoc:
else
dist-check-gtkdoc:
	@echo "*** gtk-doc must be installed and enabled in order to make dist"
	@false
endif

dist-hook: dist-check-gtkdoc dist-hook-local
	mkdir $(distdir)/tmpl
	mkdir $(distdir)/xml
	mkdir $(distdir)/html
	-cp $(srcdir)/tmpl/*.sgml $(distdir)/tmpl
	-cp $(srcdir)/xml/*.xml $(distdir)/xml
	-cp $(srcdir)/html/* $(distdir)/html

.PHONY : dist-hook-local
